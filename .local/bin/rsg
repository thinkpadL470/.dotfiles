#!/usr/bin/env dash
die()
{
	_ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_random_length="off"
_arg_charecters="6"
_arg_min="4"
_arg_max="18"
print_help()
{
	printf '%s\n' "output a Random String with specifed length, uses charecter [A-Za-z1-9]"
	printf 'Usage: %s [-r] [-c <arg>] [-L <arg>] [-H <arg>] [-h]\n' "$0"
	printf '\t%s\n' "-r: randomize the string length between two numbers (off by default)"
	printf '\t%s\n' "-c: fixed length of string (default: '6')"
	printf '\t%s\n' "-L: lower end of the random string length, lower than max (default: '4')"
	printf '\t%s\n' "-H: highr end of the random string length, higher than min (default: '18')"
	printf '\t%s\n' "-h: Prints help"
	echo
	echo 'Short options stacking mode is not supported.'
}
parse_commandline()
{
	while getopts 'rc:L:H:h' _key
	do
		case "$_key" in
			r)
				_arg_random_length="on"
				;;
			c)
				test "x$OPTARG" = x && die "Missing value for the optional argument '-$_key'." 1
				_arg_charecters="$OPTARG"
				;;
			L)
				test "x$OPTARG" = x && die "Missing value for the optional argument '-$_key'." 1
				_arg_min="$OPTARG"
				;;
			H)
				test "x$OPTARG" = x && die "Missing value for the optional argument '-$_key'." 1
				_arg_max="$OPTARG"
				;;
			h)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected option '-${_key}'" 1
				;;
		esac
	done
}
handle_passed_args_count()
{
	test "${_positionals_count}" -eq 0 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we don't expect any, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}
parse_commandline "$@"
_positionals_count=$(($# - OPTIND + 1)); _last_positional=$(eval "printf '%s' \"\$$#\""); handle_passed_args_count

# [ <-- needed because of Argbash

# vvv  PLACE YOUR CODE HERE  vvv
usage_mg='see -h or --help for help'
[ "${_arg_random_length}" = "on" ] && {
    [ ! "${_arg_charecters}" = "6" ] && {
        printf '%s\n%s\n' "-r and -l was specified only use one of those args" \
        "${usage_mg}" ;
        exit 1 ;
    };
    [ -n "${_arg_min}" -a -n "${_arg_max}" ] && [ "${_arg_min}" -gt "${_arg_max}" ] && {
        printf '%s\n%s\n' "min (specified ${_arg_min}) has to be less than max (specified ${_arg_max})" \
        "${usage_mg}" ;
        exit 1 ;
    };
    _arg_charecters=$(($(od -An -N4 -tu /dev/urandom)${_arg_min+%(${_arg_max+$_arg_max- }$_arg_min+1)${_arg_max++$_arg_min}})) ;
    tr -cd "A-Za-z1-9" < /dev/urandom | head -c ${_arg_charecters} ;
    exit 0 ;
}
[ "${_arg_random_length}" = "off" ] && {
    tr -cd "A-Za-z1-9" < /dev/urandom | head -c ${_arg_charecters} ;
    exit 0 ;
}
# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
