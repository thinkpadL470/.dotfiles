#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([find_query],[f],[specify find query for the current directory])
# ARG_OPTIONAL_SINGLE([mpv_options],[o],[specify more mpv args])
# ARG_OPTIONAL_BOOLEAN([play_infinity],[l],[loop the playlist],[off])
# ARG_POSITIONAL_INF([files],[files for mpv to play disabled if use with the -f option],[0],[])
# ARGBASH_SET_DELIM([ ])
# ARG_OPTION_STACKING([none])
# ARG_RESTRICT_VALUES([none])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_files=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_find_query=
_arg_mpv_options=
_arg_play_infinity="off"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-f|--find_query <arg>] [-o|--mpv_options <arg>] [-l|--(no-)play_infinity] [-h|--help] [<files-1>] ... [<files-n>] ...\n' "$0"
	printf '\t%s\n' "<files>: files for mpv to play disabled if use with the -f option (defaults for <files>: '')"
	printf '\t%s\n' "-f, --find_query: specify find query for the current directory (no default)"
	printf '\t%s\n' "-o, --mpv_options: specify more mpv args (no default)"
	printf '\t%s\n' "-l, --play_infinity, --no-play_infinity: loop the playlist (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
	echo
	echo 'Short options stacking mode is not supported.'
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-f|--find_query)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_find_query="$2"
				shift
				;;
			-o|--mpv_options)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_mpv_options="$2"
				shift
				;;
			-l|--no-play_infinity|--play_infinity)
				_arg_play_infinity="on"
				test "${1:0:5}" = "--no-" && _arg_play_infinity="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names=""
	_our_args=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_files[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
erorr_mg='ERROR could not start mpv or find failed'
mpv_args='--terminal=no --mute=yes '"${_arg_mpv_options}"
[ "${_arg_play_infinity}" = "on" ] && mpv_args='--loop-playlist=inf --shuffle '"${mpv_args}"
[ -n "${_arg_find_query}" ] && find_result=$(find ./ -type f -iname "*${_arg_find_query}*" 2>/dev/null)
[ -z "${_arg_find_query}" ] &&
    setsid -f mpv ${mpv_args} "${_arg_files[@]}" ||
    { printf '%s\n' "${find_result}" | setsid -f mpv ${mpv_args} --playlist=- ; } || {
        printf '%s\n' "${erorr_mg}" ;
        exit 1 ;
    }

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
