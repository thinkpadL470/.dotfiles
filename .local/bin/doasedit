#!/usr/bin/env dash
# --
cleanup () {
    rm -rf ${tmp_objects%%:*} ;
}
trap "exit" HUP QUIT TERM INT ABRT
trap "cleanup ; kill -- -$$" EXIT
# --

# -- catch arguments
[ "${#}" -gt 1 ] && error_messege='expected_only_one_argument' ;
[ -z "${1}" ] && error_messege="no_file_path_provided ${error_messege}" ;
[ "$(id -u)" -eq 0 ] && error_messege="cannot_be_run_as_root ${error_messege}" ;
[ -d "${1}" ] && error_messege="${1}_is_a_directory ${error_messege}" ;
[ -n "${error_messege}" ] && { printf '%s\n' "${error_messege}" |
    while IFS= read -r msg
    do
        printf '%s\n' "$(basename $0): ${msg}" >&2
    done ;
    exit 1 ;
};
# --

# -- get the attributes of the file like name and ext
get_f_name_attributes () {
    local file_name="${1##*/}" ;
    [ "${file_name}" = "${file_name##*.}" ] && # check if file has a extention
        local file_extension="" || local file_extension="${file_name##*.}" ;
    printf '%s' "${file_name%.*}:${file_extension}" ; # print the data
    return 0 ;
}
# --

# -- generate a string of random length and random content of numbers and letters
generate_random_string () {
    local min="6" ; # define minimal length
    local max="12" ; # define max length
    # generate the length of the final string
    local char_count=$(($(od -An -N4 -tu /dev/urandom)${min+%(${max+$max- }$min+1)${max++$min}})) ;
    tr -cd "A-Za-z1-9" < /dev/urandom | head -c ${char_count} ; # generate the string
    return 0 ;
}
# --

# -- check what auth tool is configured on the system
check__auth () {
    local doas_bin=$(realpath /usr/bin/doas) || { # set doas bin, if not in default path try to find it with type
        local doas_bin=$(type doas) && local doas_bin=$(realpath ${doas_bin##* }) ;
    } || { doas_bin="" ; true ; } ;
    local sudo_bin=$(realpath /usr/bin/sudo) || { # like for doas, do the same for sudo
        local sudo_bin=$(type sudo) && local sudo_bin=$(realpath ${sudo_bin##* }) ;
    } || { sudo_bin="" ; true ; } ;
    [ -x "${sudo_bin}" ] && [ ! -x "${doas_bin}" ] && local auth=${sudo_bin} || true ;
    [ ! -x "${sudo_bin}" ] && [ -x "${doas_bin}" ] && local auth=${doas_bin} || true ;
    [ ! -x "${sudo_bin}" ] && [ ! -x "${doas_bin}" ] && return 1 ;
    printf '%s' "${auth}" ;
    return 0 ;
}
check__auth_ret () {
    ret="${?}" ;
    [ "${ret}" = 1 ] && {
        printf '%s\n' "${sh_name}: check__auth: setup your authentication, uninstall either doas or sudo" ;
        exit 1 ;
    } ;
    return 0 ;
}
# --


# --
mkdir_folders_inseq () {
    local first_dir="${1}" ;
    local end_dir="${2}/" ;
    local dir_seqence=$({
        until [ "${first_dir}" = "${end_dir}" ]
        do
            end_dir="${end_dir%/*}"
            printf '%s\n' "${end_dir}"
        done | sort ;
    }) ;
    [ ! "${HOME}" = /root ] && {
        printf '%s\n' "${dir_seqence}" |
        while IFS= read item ; do mkdir -m 700 ${item} ; done ;
    } 2>/dev/null ;
    [ "${HOME}" = /root ] && {
        printf '%s\n' "${dir_seqence}" |
        while IFS= read item ; do mkdir -m 755 ${item} ; done ;
    } 2>/dev/null ;
    [ -d "${end_dir}" ] && return 0 || return 1
}
# --

# --
get_tmp_array () {
    [ -w "${src_file}" ] && {
        return 1 ;
    } ;
    local tmp_d="${tmpdir}/$(generate_random_string).tmp.d" ;
    [ ! -d "${tmp_d}" ] && {
        mkdir_folders_inseq "${tmpdir}" "${tmp_d}" || return 2 ;
    } ;
    local suffix=$(generate_random_string) ;
    local src_f_atributes=$(get_f_name_attributes "${src_file}") ;
    [ -z "${src_f_atributes##*.}" ] &&
        local tmp_f="${tmp_d}/${src_f_atributes%%.*}.${suffix}" ||
        local tmp_f="${tmp_d}/${src_f_atributes%%.*}.${suffix}.${src_f_atributes##*.}"
    printf '%s' "${tmp_d}:${tmp_f}" ;
    return 0 ;
}
# --

# --
move_src_2_tmp () {
    local tmp_f="${1}" ;
    { [ ! -r "${src_file}" ] && ${auth} [ -f "${src_file}" ] && ${auth} cat "${src_file}" > "${tmp_f}" ;
    } 2>/dev/null || {
    [ -r "${src_file}" ] && cat "${src_file}" > "${tmp_f}" ;
    } 2>/dev/null || {
        return 1 ;
    } ;
    cat "${tmp_f}" > "${tmp_f}.copy" ;
}
# --

# --
verify_changes () {
    local tmp_f=${1}
    cmp -s "${tmp_f}" "${tmp_f}.copy" && return 1 || {
        local attempt=0 ;
        until doas cp -f "${tmp_f}" "${src_file}"
        do
            local attempt=$((attempt + 1))
            [ "${attempt}" -ge 3 ] && {
                return 2
            }
        done ;
        return 0 ;
    } ;
}
# --

# --
sh_name=$(basename $0)
auth=$(check__auth) ; check__auth_ret
src_file="$(doas realpath "${1}")"
tmpdir="${HOME}/tmp"
tmp_objects="$(get_tmp_array)" ; {
    [ "${ret}" = 1 ] && {
        printf '%s\n' "${sh_name}: get_tmp_array: editing file in writebal dir is not premitted" ; exit 1 ;
    } ;
    [ "${ret}" = 2 ] && {
        printf '%s\n' "${sh_name}: get_tmp_array: faild to make temp directory" ; exit 1 ;
    } ;
}
    tmp_d="$(printf '%s' "${tmp_objects}" | cut -d':' -f'1')"
    tmp_f="$(printf '%s' "${tmp_objects}" | cut -d':' -f'2')"
move_src_2_tmp "${tmp_f}" ; {
    ret="${?}" ;
    [ "${ret}" = 1 ] && {
        printf '%s\n' "${sh_name}: move_src_2_tmp: failed to move ${src_file} to ${tmp_f}" ; exit 1 ;
    } ;
}
${EDITOR:-vi} "${tmp_f}"
verify_changes "${tmp_f}" ; {
    ret="${?}" ;
    [ "${ret}" = 0 ] && {
        printf '%s\n' "${sh_name}: verify_changes: changes accepted to ${src_file}" ; exit 0 ;
    } ;
    [ "${ret}" = 1 ] && {
        printf '%s\n' "${sh_name}: verify_changes: ${src_file} left unchanged" ; exit 1 ;
    } ;
    [ "${ret}" = 2 ] && {
        printf '%s\n' "${sh_name}: verify_changes: attempted force copying ${tmp_f} to ${src_file} with failure" ; exit 1 ;
    } ;
}
# --
